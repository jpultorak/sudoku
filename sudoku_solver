from random import choice, shuffle, randint


# function for solving sudoku grid
def solve(grid, make_random):
    pos = next_free(grid)
    if not pos:
        return True
    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    if make_random:
        shuffle(nums)
    for i in nums:
        if is_safe(grid, i, pos):
            grid[pos[1]][pos[0]] = i
            if solve(grid, make_random):
                return True
            grid[pos[1]][pos[0]] = 0
    return False


def next_free(grid):
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                return j, i
    return False


def print_grid(grid):
    for x in grid:
        for y in x:
            print(y, end=" ")
        print()


# pos = (x, y)
def is_safe(grid, num, pos):
    # check row
    for i in grid[pos[1]]:
        if i == num:
            return False
    # check col
    for i in range(9):
        if grid[i][pos[0]] == num:
            return False
    # check box
    bx = (pos[0] // 3) * 3
    by = (pos[1] // 3) * 3
    for i in range(bx, bx + 3):
        for j in range(by, by + 3):
            if grid[j][i] == num:
                return False
    return True


def check(grid, number, pos):
    for i in range(1, 10):
        if i == number or not is_safe(grid, i, pos):
            continue
        temp = [row[:] for row in grid]
        temp[pos[1]][pos[0]] = i
        if solve(temp, False):
            return False
    return True


# generate valid sudoku board with [total] numbers known
def generate(difficulty):
    total = 81
    lft = 50
    r = 55
    if difficulty == 2:
        lft = 38
        r = 45
    elif difficulty == 3:
        lft = 25
        r = 30

    left_out = randint(lft, r)
    grid1 = [[0] * 9 for _ in range(9)]
    solve(grid1, True)
    free = []
    for i in range(9):
        for j in range(9):
            free.append((i, j))

    while len(free) and total >= left_out+1:
        pos = choice(free)
        if check(grid1, grid1[pos[1]][pos[0]], pos):
            grid1[pos[1]][pos[0]] = 0
            total -= 1
        free.remove(pos)

    return grid1

